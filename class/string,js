/*console.log("hello" + " " + "world");
console.log("hello".concat(" world"));
let i = 0;
let val = 100;
console.log("index is: " + i + ", value is: " + val); // <----- string concatenation with "+"
console.log(`index is: ${i}, value is: ${val} `); // <------ template string literals
console.log("index is: ".concat(i, ", value is: ", val)); // .concat method
console.log("hello".includes());

// strings are primitives
// auto-boxing: temporarily place the primitive into a class to provide it with methods/properties it would otherwise not have. Allow it to act like an object

let myString = new String("Hello sunny day");
console.log(myString);

console.log("hello".length);


const car1 = {
    brand:"Ford",
    year:"1998",
    color:"red",
    model:"mustang",
};

const car2 ={
    brand:"Toyota",
    year:"1998",
    color:"white",
    model:"camry",
};

function generateCar(brand, year, color, model){
    return{
        brand: brand,
        year: year,
        color,
        model,
    };
}
const car3 = generateCar("tesla", "2020", "white", "model y");*/

//OOP: we use constructot function to create objects
//difference vs normal functions: capitalize function name for the object, no "return" keyword is used and dont create object to return
function Car(brand, year, color, model){
    this.brand = brand;
    this.year = year;
    this.color = color;
    this.model = model;
}

const car4 = new Car("tesla", "2020", "white", "model y");
console.log("car3",car3);
console.log("car4",car4);